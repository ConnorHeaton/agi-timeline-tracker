{"ast":null,"code":"var _jsxFileName = \"S:\\\\Proton Drive\\\\My files\\\\AGITimelines Code\\\\agi-timeline-tracker\\\\frontend\\\\src\\\\components\\\\TimelineChart.js\";\nimport React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TimelineChart = ({\n  data,\n  isDarkMode\n}) => {\n  const {\n    chartData,\n    experts\n  } = data;\n\n  // Generate a color for each expert\n  const getExpertColor = (expertName, index) => {\n    const colors = ['#ff6b1a',\n    // Primary orange\n    '#3498db',\n    // Blue\n    '#2ecc71',\n    // Green\n    '#9b59b6',\n    // Purple\n    '#e74c3c',\n    // Red\n    '#f39c12' // Yellow\n    ];\n\n    // Use consistent colors for known experts\n    const expertColors = {\n      'Sam Altman': colors[0],\n      'Dario Amodei': colors[1],\n      'Demis Hassabis': colors[2],\n      'Ilya Sutskever': colors[3],\n      'Jack Clark': colors[4],\n      'Geoffrey Hinton': colors[5]\n    };\n    return expertColors[expertName] || colors[index % colors.length];\n  };\n\n  // Custom tooltip for detailed information\n  const CustomTooltip = ({\n    active,\n    payload,\n    label\n  }) => {\n    if (active && payload && payload.length) {\n      const visiblePayload = payload.filter(p => !p.name.includes('_'));\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `timeline-tooltip ${isDarkMode ? 'dark' : 'light'}`,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"tooltip-year\",\n          children: `Year: ${label}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), visiblePayload.map((entry, index) => {\n          const source = payload.find(p => p.name === `${entry.name}_source`);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tooltip-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                color: entry.color\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"expert-name\",\n                children: [entry.name, \":\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 19\n              }, this), \" \", entry.value, \" (predicted AGI year)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 17\n            }, this), source && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"tooltip-source\",\n              children: [\"Source: \", source.value]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 19\n            }, this)]\n          }, `item-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timeline-chart\",\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 400,\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        data: chartData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\",\n          stroke: isDarkMode ? '#555' : '#ccc'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"year\",\n          stroke: isDarkMode ? '#eee' : '#333',\n          label: {\n            value: 'Year Prediction Was Made',\n            position: 'insideBottom',\n            offset: -5,\n            fill: isDarkMode ? '#eee' : '#333'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          stroke: isDarkMode ? '#eee' : '#333',\n          label: {\n            value: 'Predicted AGI Year',\n            angle: -90,\n            position: 'insideLeft',\n            fill: isDarkMode ? '#eee' : '#333'\n          },\n          domain: ['dataMin - 5', 'dataMax + 5']\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n          content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), experts.map((expert, index) => /*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: expert,\n          stroke: getExpertColor(expert, index),\n          activeDot: {\n            r: 8\n          },\n          strokeWidth: 2,\n          connectNulls: true\n        }, expert, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_c = TimelineChart;\nexport default TimelineChart;\nvar _c;\n$RefreshReg$(_c, \"TimelineChart\");","map":{"version":3,"names":["React","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","TimelineChart","data","isDarkMode","chartData","experts","getExpertColor","expertName","index","colors","expertColors","length","CustomTooltip","active","payload","label","visiblePayload","filter","p","name","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","entry","source","find","style","color","value","width","height","margin","top","right","left","bottom","strokeDasharray","stroke","dataKey","position","offset","fill","angle","domain","content","expert","type","activeDot","r","strokeWidth","connectNulls","_c","$RefreshReg$"],"sources":["S:/Proton Drive/My files/AGITimelines Code/agi-timeline-tracker/frontend/src/components/TimelineChart.js"],"sourcesContent":["import React from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nconst TimelineChart = ({ data, isDarkMode }) => {\n  const { chartData, experts } = data;\n  \n  // Generate a color for each expert\n  const getExpertColor = (expertName, index) => {\n    const colors = [\n      '#ff6b1a', // Primary orange\n      '#3498db', // Blue\n      '#2ecc71', // Green\n      '#9b59b6', // Purple\n      '#e74c3c', // Red\n      '#f39c12'  // Yellow\n    ];\n    \n    // Use consistent colors for known experts\n    const expertColors = {\n      'Sam Altman': colors[0],\n      'Dario Amodei': colors[1],\n      'Demis Hassabis': colors[2],\n      'Ilya Sutskever': colors[3],\n      'Jack Clark': colors[4],\n      'Geoffrey Hinton': colors[5]\n    };\n    \n    return expertColors[expertName] || colors[index % colors.length];\n  };\n  \n  // Custom tooltip for detailed information\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      const visiblePayload = payload.filter(p => !p.name.includes('_'));\n      \n      return (\n        <div className={`timeline-tooltip ${isDarkMode ? 'dark' : 'light'}`}>\n          <p className=\"tooltip-year\">{`Year: ${label}`}</p>\n          {visiblePayload.map((entry, index) => {\n            const source = payload.find(p => p.name === `${entry.name}_source`);\n            \n            return (\n              <div key={`item-${index}`} className=\"tooltip-item\">\n                <p style={{ color: entry.color }}>\n                  <span className=\"expert-name\">{entry.name}:</span> {entry.value} (predicted AGI year)\n                </p>\n                {source && (\n                  <p className=\"tooltip-source\">\n                    Source: {source.value}\n                  </p>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  return (\n    <div className=\"timeline-chart\">\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart\n          data={chartData}\n          margin={{ top: 20, right: 30, left: 20, bottom: 20 }}\n        >\n          <CartesianGrid strokeDasharray=\"3 3\" stroke={isDarkMode ? '#555' : '#ccc'} />\n          <XAxis \n            dataKey=\"year\" \n            stroke={isDarkMode ? '#eee' : '#333'}\n            label={{ \n              value: 'Year Prediction Was Made', \n              position: 'insideBottom', \n              offset: -5,\n              fill: isDarkMode ? '#eee' : '#333'\n            }}\n          />\n          <YAxis\n            stroke={isDarkMode ? '#eee' : '#333'}\n            label={{ \n              value: 'Predicted AGI Year', \n              angle: -90, \n              position: 'insideLeft',\n              fill: isDarkMode ? '#eee' : '#333'\n            }}\n            domain={['dataMin - 5', 'dataMax + 5']}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend />\n          {experts.map((expert, index) => (\n            <Line\n              key={expert}\n              type=\"monotone\"\n              dataKey={expert}\n              stroke={getExpertColor(expert, index)}\n              activeDot={{ r: 8 }}\n              strokeWidth={2}\n              connectNulls={true}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default TimelineChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}