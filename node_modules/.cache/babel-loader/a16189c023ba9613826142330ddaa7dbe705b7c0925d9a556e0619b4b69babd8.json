{"ast":null,"code":"// src/utils/dataHelpers.js\n\n// Sample prediction data for development\nexport const samplePredictions = [{\n  id: '1',\n  expert: 'Sam Altman',\n  organization: 'OpenAI',\n  estimatedDate: '2025-2030',\n  source: 'Interview with The New York Times',\n  sourceUrl: 'https://example.com/interview1',\n  predictionDate: '2023-03-15',\n  definition: 'AGI refers to highly autonomous systems that outperform humans at most economically valuable work.',\n  definitionSummary: 'Systems outperforming humans at economically valuable work'\n}, {\n  id: '2',\n  expert: 'Dario Amodei',\n  organization: 'Anthropic',\n  estimatedDate: '2030-2040',\n  source: 'Podcast interview on the Future of Life',\n  sourceUrl: 'https://example.com/podcast1',\n  predictionDate: '2022-09-20',\n  definition: 'AGI is a system that can do anything a human can do intellectually, and probably surpass humans in most domains.',\n  definitionSummary: 'System doing anything humans can intellectually & surpassing them'\n}, {\n  id: '3',\n  expert: 'Demis Hassabis',\n  organization: 'Google DeepMind',\n  estimatedDate: '2030-2035',\n  source: 'Interview at DeepMind Conference',\n  sourceUrl: 'https://example.com/conference1',\n  predictionDate: '2023-01-10',\n  definition: 'AGI will be a system that can generalise across many different domains and apply its intelligence to solve unfamiliar problems.',\n  definitionSummary: 'System generalizing across domains to solve unfamiliar problems'\n}, {\n  id: '4',\n  expert: 'Ilya Sutskever',\n  organization: 'OpenAI',\n  estimatedDate: '2027-2033',\n  source: 'AI Safety Summit Keynote',\n  sourceUrl: 'https://example.com/keynote1',\n  predictionDate: '2022-11-05',\n  definition: 'AGI will have the ability to perform any intellectual task that a human can do, and likely exceed human performance in many domains.',\n  definitionSummary: 'System performing any human intellectual task & exceeding humans'\n}, {\n  id: '5',\n  expert: 'Jack Clark',\n  organization: 'Anthropic',\n  estimatedDate: '2035-2045',\n  source: 'Annual State of AI Report',\n  sourceUrl: 'https://example.com/report1',\n  predictionDate: '2023-07-12',\n  definition: 'AGI is a machine system that can perform the full range of cognitive tasks a human can perform, including reasoning, planning, and creative endeavors.',\n  definitionSummary: 'Machine performing full range of human cognitive tasks'\n}, {\n  id: '6',\n  expert: 'Geoffrey Hinton',\n  organization: 'University of Toronto',\n  estimatedDate: '2035-2045',\n  source: 'Interview with The Guardian',\n  sourceUrl: 'https://example.com/hinton1',\n  predictionDate: '2023-05-01',\n  definition: 'AGI would mean machines that can learn and reason like humans, but potentially much faster and with vastly more information.',\n  definitionSummary: 'Machines learning & reasoning like humans but faster & with more data'\n}];\n\n// Sample historical prediction data\nexport const historicalPredictions = [\n// Sam Altman\n{\n  expertName: \"Sam Altman\",\n  estimatedDate: \"2040-2060\",\n  source: \"Y Combinator Blog Post\",\n  sourceUrl: \"https://example.com/sam1\",\n  predictionDate: \"2018-05-16\",\n  definition: \"AI systems that outperform humans at almost all economically valuable work\",\n  definitionSummary: \"AI systems that outperform humans at economically valuable work\"\n}, {\n  expertName: \"Sam Altman\",\n  estimatedDate: \"2035-2045\",\n  source: \"Interview at MIT AI Conference\",\n  sourceUrl: \"https://example.com/sam2\",\n  predictionDate: \"2019-10-15\",\n  definition: \"Systems that can perform at human level across most cognitive tasks and continue to improve\",\n  definitionSummary: \"Systems performing at human level across most cognitive tasks\"\n}, {\n  expertName: \"Sam Altman\",\n  estimatedDate: \"2030-2040\",\n  source: \"OpenAI Keynote Speech\",\n  sourceUrl: \"https://example.com/sam3\",\n  predictionDate: \"2021-06-10\",\n  definition: \"AI systems that match or exceed human intelligence across virtually all domains\",\n  definitionSummary: \"AI matching/exceeding human intelligence across all domains\"\n}, {\n  expertName: \"Sam Altman\",\n  estimatedDate: \"2025-2030\",\n  source: \"Interview with The New York Times\",\n  sourceUrl: \"https://example.com/sam4\",\n  predictionDate: \"2023-03-15\",\n  definition: \"AGI refers to highly autonomous systems that outperform humans at most economically valuable work.\",\n  definitionSummary: \"Systems outperforming humans at most economically valuable work\"\n},\n// Demis Hassabis\n{\n  expertName: \"Demis Hassabis\",\n  estimatedDate: \"2040-2050\",\n  source: \"Lecture at Royal Society\",\n  sourceUrl: \"https://example.com/demis1\",\n  predictionDate: \"2016-09-22\",\n  definition: \"AI capable of mastering multiple domains and transferring knowledge between them autonomously\",\n  definitionSummary: \"AI mastering multiple domains with autonomous knowledge transfer\"\n}, {\n  expertName: \"Demis Hassabis\",\n  estimatedDate: \"2035-2045\",\n  source: \"Interview with The Guardian\",\n  sourceUrl: \"https://example.com/demis2\",\n  predictionDate: \"2018-11-05\",\n  definition: \"Systems that can learn and reason about the world in the way that humans do\",\n  definitionSummary: \"Systems that learn and reason like humans\"\n}, {\n  expertName: \"Demis Hassabis\",\n  estimatedDate: \"2030-2040\",\n  source: \"World Economic Forum Panel\",\n  sourceUrl: \"https://example.com/demis3\",\n  predictionDate: \"2020-01-22\",\n  definition: \"AI systems with the generality of human cognition but potentially far greater capabilities\",\n  definitionSummary: \"AI with human-like generality but greater capabilities\"\n}, {\n  expertName: \"Demis Hassabis\",\n  estimatedDate: \"2030-2035\",\n  source: \"Interview at DeepMind Conference\",\n  sourceUrl: \"https://example.com/demis4\",\n  predictionDate: \"2023-01-10\",\n  definition: \"AGI will be a system that can generalise across many different domains and apply its intelligence to solve unfamiliar problems.\",\n  definitionSummary: \"System generalizing across domains to solve unfamiliar problems\"\n},\n// Dario Amodei\n{\n  expertName: \"Dario Amodei\",\n  estimatedDate: \"2040-2060\",\n  source: \"AI Safety Conference\",\n  sourceUrl: \"https://example.com/dario1\",\n  predictionDate: \"2018-06-30\",\n  definition: \"AI systems that can do anything a human brain can do, with at least the same level of generality\",\n  definitionSummary: \"AI doing anything a human brain can with same generality\"\n}, {\n  expertName: \"Dario Amodei\",\n  estimatedDate: \"2035-2050\",\n  source: \"Interview with MIT Technology Review\",\n  sourceUrl: \"https://example.com/dario2\",\n  predictionDate: \"2020-02-17\",\n  definition: \"AI systems that match human capabilities in virtually all cognitive domains\",\n  definitionSummary: \"AI matching human capabilities in all cognitive domains\"\n}, {\n  expertName: \"Dario Amodei\",\n  estimatedDate: \"2030-2045\",\n  source: \"Stanford AI Safety Workshop\",\n  sourceUrl: \"https://example.com/dario3\",\n  predictionDate: \"2021-09-06\",\n  definition: \"AI with the ability to learn any intellectual task that a human can, with minimal or no domain-specific training\",\n  definitionSummary: \"AI learning any human intellectual task with minimal training\"\n}, {\n  expertName: \"Dario Amodei\",\n  estimatedDate: \"2030-2040\",\n  source: \"Podcast interview on the Future of Life\",\n  sourceUrl: \"https://example.com/dario4\",\n  predictionDate: \"2022-09-20\",\n  definition: \"AGI is a system that can do anything a human can do intellectually, and probably surpass humans in most domains.\",\n  definitionSummary: \"System doing anything humans can intellectually & surpassing them\"\n}];\n\n// Calculate mean year from date range (e.g., \"2030-2040\" => \" (2035)\")\nexport const calculateMeanYear = dateRange => {\n  const years = dateRange.match(/\\d{4}/g);\n  if (!years || years.length === 0) return '';\n  if (years.length === 1) return '';\n  const startYear = parseInt(years[0]);\n  const endYear = parseInt(years[years.length - 1]);\n  const meanYear = Math.round((startYear + endYear) / 2);\n  return ` (${meanYear})`;\n};\n\n// Format data for timeline visualization\nexport const prepareTimelineData = predictions => {\n  // We'll map from our sample predictions to historical predictions format\n  const formattedPredictions = predictions.map(p => ({\n    expertName: p.expert,\n    estimatedDate: p.estimatedDate,\n    source: p.source,\n    sourceUrl: p.sourceUrl,\n    predictionDate: p.predictionDate,\n    definition: p.definition,\n    definitionSummary: p.definitionSummary\n  }));\n\n  // Combine with historical data to create a comprehensive dataset\n  const allPredictions = [...historicalPredictions, ...formattedPredictions];\n\n  // Remove duplicates (if any)\n  const uniquePredictions = [];\n  const seen = new Set();\n  allPredictions.forEach(prediction => {\n    const key = `${prediction.expertName}-${prediction.predictionDate}`;\n    if (!seen.has(key)) {\n      seen.add(key);\n      uniquePredictions.push(prediction);\n    }\n  });\n\n  // Sort predictions by expert and date\n  const sortedPredictions = uniquePredictions.sort((a, b) => {\n    // First sort by expert name\n    if (a.expertName !== b.expertName) {\n      return a.expertName.localeCompare(b.expertName);\n    }\n    // Then sort by prediction date\n    return new Date(a.predictionDate) - new Date(b.predictionDate);\n  });\n\n  // Create a map of experts and their predictions\n  const expertMap = new Map();\n  sortedPredictions.forEach(prediction => {\n    const predDate = new Date(prediction.predictionDate);\n    const predYear = predDate.getFullYear();\n\n    // Extract years from estimated date\n    const years = prediction.estimatedDate.match(/\\d{4}/g);\n    let estimatedMean;\n    if (years && years.length > 0) {\n      if (years.length === 1) {\n        estimatedMean = parseInt(years[0]);\n      } else {\n        estimatedMean = Math.round((parseInt(years[0]) + parseInt(years[years.length - 1])) / 2);\n      }\n    } else {\n      return; // Skip if no years found\n    }\n    if (!expertMap.has(prediction.expertName)) {\n      expertMap.set(prediction.expertName, []);\n    }\n    expertMap.get(prediction.expertName).push({\n      year: predYear,\n      estimatedYear: estimatedMean,\n      predictionDate: prediction.predictionDate,\n      source: prediction.source,\n      definition: prediction.definition\n    });\n  });\n\n  // Format data for the chart (all points on the same timeline)\n  const chartData = [];\n\n  // Find min and max years to create the full range\n  const allYears = sortedPredictions.map(p => new Date(p.predictionDate).getFullYear());\n  const minYear = Math.min(...allYears);\n  const maxYear = Math.max(...allYears);\n\n  // Create data points for each year\n  for (let year = minYear; year <= maxYear; year++) {\n    const dataPoint = {\n      year\n    };\n\n    // Add data for each expert at this year if available\n    expertMap.forEach((predictions, expertName) => {\n      // Find the most recent prediction for this expert that's before or equal to the current year\n      const relevantPredictions = predictions.filter(p => p.year <= year);\n      if (relevantPredictions.length > 0) {\n        // Get the most recent prediction\n        const latestPrediction = relevantPredictions.reduce((latest, current) => new Date(latest.predictionDate) > new Date(current.predictionDate) ? latest : current);\n        dataPoint[expertName] = latestPrediction.estimatedYear;\n        dataPoint[`${expertName}_source`] = latestPrediction.source;\n        dataPoint[`${expertName}_definition`] = latestPrediction.definition;\n      }\n    });\n    chartData.push(dataPoint);\n  }\n  return {\n    chartData,\n    experts: Array.from(expertMap.keys())\n  };\n};","map":{"version":3,"names":["samplePredictions","id","expert","organization","estimatedDate","source","sourceUrl","predictionDate","definition","definitionSummary","historicalPredictions","expertName","calculateMeanYear","dateRange","years","match","length","startYear","parseInt","endYear","meanYear","Math","round","prepareTimelineData","predictions","formattedPredictions","map","p","allPredictions","uniquePredictions","seen","Set","forEach","prediction","key","has","add","push","sortedPredictions","sort","a","b","localeCompare","Date","expertMap","Map","predDate","predYear","getFullYear","estimatedMean","set","get","year","estimatedYear","chartData","allYears","minYear","min","maxYear","max","dataPoint","relevantPredictions","filter","latestPrediction","reduce","latest","current","experts","Array","from","keys"],"sources":["S:/Proton Drive/My files/AGITimelines Code/agi-timeline-tracker/frontend/src/utils/dataHelpers.js"],"sourcesContent":["// src/utils/dataHelpers.js\n\n// Sample prediction data for development\nexport const samplePredictions = [\n  {\n    id: '1',\n    expert: 'Sam Altman',\n    organization: 'OpenAI',\n    estimatedDate: '2025-2030',\n    source: 'Interview with The New York Times',\n    sourceUrl: 'https://example.com/interview1',\n    predictionDate: '2023-03-15',\n    definition: 'AGI refers to highly autonomous systems that outperform humans at most economically valuable work.',\n    definitionSummary: 'Systems outperforming humans at economically valuable work'\n  },\n  {\n    id: '2',\n    expert: 'Dario Amodei',\n    organization: 'Anthropic',\n    estimatedDate: '2030-2040',\n    source: 'Podcast interview on the Future of Life',\n    sourceUrl: 'https://example.com/podcast1',\n    predictionDate: '2022-09-20',\n    definition: 'AGI is a system that can do anything a human can do intellectually, and probably surpass humans in most domains.',\n    definitionSummary: 'System doing anything humans can intellectually & surpassing them'\n  },\n  {\n    id: '3',\n    expert: 'Demis Hassabis',\n    organization: 'Google DeepMind',\n    estimatedDate: '2030-2035',\n    source: 'Interview at DeepMind Conference',\n    sourceUrl: 'https://example.com/conference1',\n    predictionDate: '2023-01-10',\n    definition: 'AGI will be a system that can generalise across many different domains and apply its intelligence to solve unfamiliar problems.',\n    definitionSummary: 'System generalizing across domains to solve unfamiliar problems'\n  },\n  {\n    id: '4',\n    expert: 'Ilya Sutskever',\n    organization: 'OpenAI',\n    estimatedDate: '2027-2033',\n    source: 'AI Safety Summit Keynote',\n    sourceUrl: 'https://example.com/keynote1',\n    predictionDate: '2022-11-05',\n    definition: 'AGI will have the ability to perform any intellectual task that a human can do, and likely exceed human performance in many domains.',\n    definitionSummary: 'System performing any human intellectual task & exceeding humans'\n  },\n  {\n    id: '5',\n    expert: 'Jack Clark',\n    organization: 'Anthropic',\n    estimatedDate: '2035-2045',\n    source: 'Annual State of AI Report',\n    sourceUrl: 'https://example.com/report1',\n    predictionDate: '2023-07-12',\n    definition: 'AGI is a machine system that can perform the full range of cognitive tasks a human can perform, including reasoning, planning, and creative endeavors.',\n    definitionSummary: 'Machine performing full range of human cognitive tasks'\n  },\n  {\n    id: '6',\n    expert: 'Geoffrey Hinton',\n    organization: 'University of Toronto',\n    estimatedDate: '2035-2045',\n    source: 'Interview with The Guardian',\n    sourceUrl: 'https://example.com/hinton1',\n    predictionDate: '2023-05-01',\n    definition: 'AGI would mean machines that can learn and reason like humans, but potentially much faster and with vastly more information.',\n    definitionSummary: 'Machines learning & reasoning like humans but faster & with more data'\n  }\n];\n\n// Sample historical prediction data\nexport const historicalPredictions = [\n  // Sam Altman\n  {\n    expertName: \"Sam Altman\",\n    estimatedDate: \"2040-2060\",\n    source: \"Y Combinator Blog Post\",\n    sourceUrl: \"https://example.com/sam1\",\n    predictionDate: \"2018-05-16\",\n    definition: \"AI systems that outperform humans at almost all economically valuable work\",\n    definitionSummary: \"AI systems that outperform humans at economically valuable work\"\n  },\n  {\n    expertName: \"Sam Altman\",\n    estimatedDate: \"2035-2045\",\n    source: \"Interview at MIT AI Conference\",\n    sourceUrl: \"https://example.com/sam2\",\n    predictionDate: \"2019-10-15\",\n    definition: \"Systems that can perform at human level across most cognitive tasks and continue to improve\",\n    definitionSummary: \"Systems performing at human level across most cognitive tasks\"\n  },\n  {\n    expertName: \"Sam Altman\",\n    estimatedDate: \"2030-2040\",\n    source: \"OpenAI Keynote Speech\",\n    sourceUrl: \"https://example.com/sam3\",\n    predictionDate: \"2021-06-10\",\n    definition: \"AI systems that match or exceed human intelligence across virtually all domains\",\n    definitionSummary: \"AI matching/exceeding human intelligence across all domains\"\n  },\n  {\n    expertName: \"Sam Altman\",\n    estimatedDate: \"2025-2030\",\n    source: \"Interview with The New York Times\",\n    sourceUrl: \"https://example.com/sam4\",\n    predictionDate: \"2023-03-15\",\n    definition: \"AGI refers to highly autonomous systems that outperform humans at most economically valuable work.\",\n    definitionSummary: \"Systems outperforming humans at most economically valuable work\"\n  },\n  \n  // Demis Hassabis\n  {\n    expertName: \"Demis Hassabis\",\n    estimatedDate: \"2040-2050\",\n    source: \"Lecture at Royal Society\",\n    sourceUrl: \"https://example.com/demis1\",\n    predictionDate: \"2016-09-22\",\n    definition: \"AI capable of mastering multiple domains and transferring knowledge between them autonomously\",\n    definitionSummary: \"AI mastering multiple domains with autonomous knowledge transfer\"\n  },\n  {\n    expertName: \"Demis Hassabis\",\n    estimatedDate: \"2035-2045\",\n    source: \"Interview with The Guardian\",\n    sourceUrl: \"https://example.com/demis2\",\n    predictionDate: \"2018-11-05\",\n    definition: \"Systems that can learn and reason about the world in the way that humans do\",\n    definitionSummary: \"Systems that learn and reason like humans\"\n  },\n  {\n    expertName: \"Demis Hassabis\",\n    estimatedDate: \"2030-2040\",\n    source: \"World Economic Forum Panel\",\n    sourceUrl: \"https://example.com/demis3\",\n    predictionDate: \"2020-01-22\",\n    definition: \"AI systems with the generality of human cognition but potentially far greater capabilities\",\n    definitionSummary: \"AI with human-like generality but greater capabilities\"\n  },\n  {\n    expertName: \"Demis Hassabis\",\n    estimatedDate: \"2030-2035\",\n    source: \"Interview at DeepMind Conference\",\n    sourceUrl: \"https://example.com/demis4\",\n    predictionDate: \"2023-01-10\",\n    definition: \"AGI will be a system that can generalise across many different domains and apply its intelligence to solve unfamiliar problems.\",\n    definitionSummary: \"System generalizing across domains to solve unfamiliar problems\"\n  },\n  \n  // Dario Amodei\n  {\n    expertName: \"Dario Amodei\",\n    estimatedDate: \"2040-2060\",\n    source: \"AI Safety Conference\",\n    sourceUrl: \"https://example.com/dario1\",\n    predictionDate: \"2018-06-30\",\n    definition: \"AI systems that can do anything a human brain can do, with at least the same level of generality\",\n    definitionSummary: \"AI doing anything a human brain can with same generality\"\n  },\n  {\n    expertName: \"Dario Amodei\",\n    estimatedDate: \"2035-2050\",\n    source: \"Interview with MIT Technology Review\",\n    sourceUrl: \"https://example.com/dario2\",\n    predictionDate: \"2020-02-17\",\n    definition: \"AI systems that match human capabilities in virtually all cognitive domains\",\n    definitionSummary: \"AI matching human capabilities in all cognitive domains\"\n  },\n  {\n    expertName: \"Dario Amodei\",\n    estimatedDate: \"2030-2045\",\n    source: \"Stanford AI Safety Workshop\",\n    sourceUrl: \"https://example.com/dario3\",\n    predictionDate: \"2021-09-06\",\n    definition: \"AI with the ability to learn any intellectual task that a human can, with minimal or no domain-specific training\",\n    definitionSummary: \"AI learning any human intellectual task with minimal training\"\n  },\n  {\n    expertName: \"Dario Amodei\",\n    estimatedDate: \"2030-2040\",\n    source: \"Podcast interview on the Future of Life\",\n    sourceUrl: \"https://example.com/dario4\",\n    predictionDate: \"2022-09-20\",\n    definition: \"AGI is a system that can do anything a human can do intellectually, and probably surpass humans in most domains.\",\n    definitionSummary: \"System doing anything humans can intellectually & surpassing them\"\n  }\n];\n\n// Calculate mean year from date range (e.g., \"2030-2040\" => \" (2035)\")\nexport const calculateMeanYear = (dateRange) => {\n  const years = dateRange.match(/\\d{4}/g);\n  if (!years || years.length === 0) return '';\n  \n  if (years.length === 1) return '';\n  \n  const startYear = parseInt(years[0]);\n  const endYear = parseInt(years[years.length - 1]);\n  const meanYear = Math.round((startYear + endYear) / 2);\n  \n  return ` (${meanYear})`;\n};\n\n// Format data for timeline visualization\nexport const prepareTimelineData = (predictions) => {\n  // We'll map from our sample predictions to historical predictions format\n  const formattedPredictions = predictions.map(p => ({\n    expertName: p.expert,\n    estimatedDate: p.estimatedDate,\n    source: p.source,\n    sourceUrl: p.sourceUrl,\n    predictionDate: p.predictionDate,\n    definition: p.definition,\n    definitionSummary: p.definitionSummary\n  }));\n  \n  // Combine with historical data to create a comprehensive dataset\n  const allPredictions = [...historicalPredictions, ...formattedPredictions];\n  \n  // Remove duplicates (if any)\n  const uniquePredictions = [];\n  const seen = new Set();\n  \n  allPredictions.forEach(prediction => {\n    const key = `${prediction.expertName}-${prediction.predictionDate}`;\n    if (!seen.has(key)) {\n      seen.add(key);\n      uniquePredictions.push(prediction);\n    }\n  });\n  \n  // Sort predictions by expert and date\n  const sortedPredictions = uniquePredictions.sort((a, b) => {\n    // First sort by expert name\n    if (a.expertName !== b.expertName) {\n      return a.expertName.localeCompare(b.expertName);\n    }\n    // Then sort by prediction date\n    return new Date(a.predictionDate) - new Date(b.predictionDate);\n  });\n\n  // Create a map of experts and their predictions\n  const expertMap = new Map();\n  \n  sortedPredictions.forEach(prediction => {\n    const predDate = new Date(prediction.predictionDate);\n    const predYear = predDate.getFullYear();\n    \n    // Extract years from estimated date\n    const years = prediction.estimatedDate.match(/\\d{4}/g);\n    let estimatedMean;\n    \n    if (years && years.length > 0) {\n      if (years.length === 1) {\n        estimatedMean = parseInt(years[0]);\n      } else {\n        estimatedMean = Math.round((parseInt(years[0]) + parseInt(years[years.length - 1])) / 2);\n      }\n    } else {\n      return; // Skip if no years found\n    }\n    \n    if (!expertMap.has(prediction.expertName)) {\n      expertMap.set(prediction.expertName, []);\n    }\n    \n    expertMap.get(prediction.expertName).push({\n      year: predYear,\n      estimatedYear: estimatedMean,\n      predictionDate: prediction.predictionDate,\n      source: prediction.source,\n      definition: prediction.definition\n    });\n  });\n  \n  // Format data for the chart (all points on the same timeline)\n  const chartData = [];\n  \n  // Find min and max years to create the full range\n  const allYears = sortedPredictions.map(p => new Date(p.predictionDate).getFullYear());\n  const minYear = Math.min(...allYears);\n  const maxYear = Math.max(...allYears);\n  \n  // Create data points for each year\n  for (let year = minYear; year <= maxYear; year++) {\n    const dataPoint = { year };\n    \n    // Add data for each expert at this year if available\n    expertMap.forEach((predictions, expertName) => {\n      // Find the most recent prediction for this expert that's before or equal to the current year\n      const relevantPredictions = predictions.filter(p => p.year <= year);\n      if (relevantPredictions.length > 0) {\n        // Get the most recent prediction\n        const latestPrediction = relevantPredictions.reduce((latest, current) => \n          new Date(latest.predictionDate) > new Date(current.predictionDate) ? latest : current\n        );\n        \n        dataPoint[expertName] = latestPrediction.estimatedYear;\n        dataPoint[`${expertName}_source`] = latestPrediction.source;\n        dataPoint[`${expertName}_definition`] = latestPrediction.definition;\n      }\n    });\n    \n    chartData.push(dataPoint);\n  }\n  \n  return { chartData, experts: Array.from(expertMap.keys()) };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}